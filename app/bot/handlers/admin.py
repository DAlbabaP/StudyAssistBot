from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Document
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.bot.states.states import AdminStates
from app.bot.keyboards.inline import (
    get_admin_main_keyboard, get_status_change_keyboard,
    get_orders_pagination_keyboard, get_order_details_keyboard
)
from app.bot.keyboards.client import get_cancel_keyboard, get_main_menu
from app.bot.utils.text_formatter import format_order_list, format_admin_order_info
from app.services.user_service import UserService
from app.services.order_service import OrderService
from app.database.models import OrderStatus, get_status_text, get_status_emoji
from app.database.connection import get_db_async
from app.config import settings

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == settings.admin_id


@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await state.clear()
    
    db = await get_db_async()
    order_service = OrderService(db)
    user_service = UserService(db)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = order_service.get_orders_statistics()
    users_count = user_service.get_users_count()
    
    db.close()
    
    admin_text = "üë§ <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
    admin_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
    admin_text += f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n\n"
    admin_text += "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
    
    for status, count in stats['by_status'].items():
        status_text = get_status_text(OrderStatus(status))
        admin_text += f"‚Ä¢ {status_text}: {count}\n"
    
    await message.answer(
        admin_text,
        reply_markup=get_admin_main_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("admin_orders:"))
async def admin_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –∞–¥–º–∏–Ω—É"""
    status_filter = callback.data.split(":")[1]
    
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    db = await get_db_async()
    order_service = OrderService(db)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    status = None
    if status_filter != "all":
        status = OrderStatus(status_filter)
    
    result = order_service.get_orders_by_status(status, page=1, per_page=5)
    
    db.close()
    
    if not result['orders']:
        await callback.answer("–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
    titles = {
        "all": "–í—Å–µ –∑–∞–∫–∞–∑—ã",
        "new": "–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã",
        "in_progress": "–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ",
        "ready": "–ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"
    }
    
    text = f"üìã <b>{titles.get(status_filter, '–ó–∞–∫–∞–∑—ã')}</b> (—Å—Ç—Ä. 1/{result['total_pages']}):\n\n"
    
    for order in result['orders']:
        from app.database.models import get_status_emoji, get_status_text
        status_emoji = get_status_emoji(order.status)
        short_topic = order.topic[:30] + "..." if len(order.topic) > 30 else order.topic
        
        text += f"üÜî <b>#{order.id}</b> - {order.work_type}\n"
        text += f"üë§ {order.user.full_name}\n"
        text += f"üìã {short_topic}\n"
        text += f"üìä {status_emoji} {get_status_text(order.status)}\n"
        
        if order.price:
            text += f"üí∞ {order.price} —Ä—É–±.\n"
        
        text += f"üìÖ {order.created_at.strftime('%d.%m.%Y')}\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    
    keyboard = None
    if result['total_pages'] > 1:
        keyboard = get_orders_pagination_keyboard(
            result['page'], 
            result['total_pages'], 
            None
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("set_price:"))
async def set_price_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    order_id = int(callback.data.split(":")[1])
    
    await state.update_data(order_id=order_id)
    await state.set_state(AdminStates.SET_ORDER_PRICE)
    
    await callback.message.answer(
        f"üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(AdminStates.SET_ORDER_PRICE)
async def set_price_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_menu()
        )
        return
    
    try:
        price = float(message.text.replace(",", "."))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50):",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    data = await state.get_data()
    order_id = data['order_id']
    
    db = await get_db_async()
    order_service = OrderService(db)
    user_service = UserService(db)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
    success = order_service.update_order_price(order_id, price)
    
    if success:
        order = order_service.get_order_by_id(order_id)
        db.close()
        
        await state.clear()
        await message.answer(
            f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price} —Ä—É–±.",
            reply_markup=get_main_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            from aiogram import Bot
            bot = Bot(token=settings.bot_token)
            
            client_text = f"üí∞ <b>–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            client_text += f"–ó–∞–∫–∞–∑ #{order_id}: <b>{price} —Ä—É–±.</b>\n\n"
            client_text += "–î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'"
            
            await bot.send_message(
                chat_id=order.user.telegram_id,
                text=client_text,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
    else:
        db.close()
        await state.clear()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}",
            reply_markup=get_main_menu()
        )


@router.callback_query(F.data.startswith("change_status:"))
async def change_status_start(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    order_id = int(callback.data.split(":")[1])
    
    await callback.message.edit_text(
        f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=get_status_change_keyboard(order_id),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("status:"))
async def change_status_process(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    _, order_id_str, new_status_str = callback.data.split(":")
    order_id = int(order_id_str)
    new_status = OrderStatus(new_status_str)
    
    db = await get_db_async()
    order_service = OrderService(db)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    order = order_service.get_order_by_id(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        db.close()
        return
    
    old_status = order.status
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    success = order_service.update_order_status(
        order_id, 
        new_status, 
        f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    )
    
    if success:
        order = order_service.get_order_by_id(order_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        db.close()
        
        from app.database.models import get_status_text
        
        await callback.message.edit_text(
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id}\n"
            f"–ë—ã–ª–æ: {get_status_text(old_status)}\n"
            f"–°—Ç–∞–ª–æ: {get_status_text(new_status)}",
            reply_markup=get_order_details_keyboard(order_id, True),
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            from aiogram import Bot
            bot = Bot(token=settings.bot_token)
            
            status_emoji = get_status_emoji(new_status)
            client_text = f"üîî <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            client_text += f"–ó–∞–∫–∞–∑ #{order_id}\n"
            client_text += f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_emoji} {get_status_text(new_status)}"
            
            await bot.send_message(
                chat_id=order.user.telegram_id,
                text=client_text,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
    else:
        db.close()
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}",
            parse_mode="HTML"
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("send_file:"))
async def send_file_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    order_id = int(callback.data.split(":")[1])
    
    await state.update_data(order_id=order_id)
    await state.set_state(AdminStates.SEND_ORDER_FILE)
    
    await callback.message.answer(
        f"üìé <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(AdminStates.SEND_ORDER_FILE, F.document)
async def send_file_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    data = await state.get_data()
    order_id = data['order_id']
    
    db = await get_db_async()
    order_service = OrderService(db)
    
    order = order_service.get_order_by_id(order_id)
    if not order:
        await message.answer(
            f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_main_menu()
        )
        db.close()
        await state.clear()
        return
    
    db.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É
    try:
        from aiogram import Bot
        bot = Bot(token=settings.bot_token)
        
        client_text = f"üìé <b>–§–∞–π–ª –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        client_text += f"–í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞! –§–∞–π–ª –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏."
        
        await bot.send_document(
            chat_id=order.user.telegram_id,
            document=message.document.file_id,
            caption=client_text,
            parse_mode="HTML"
        )
        
        await state.clear()
        await message.answer(
            f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        await state.clear()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}",
            reply_markup=get_main_menu()
        )


@router.message(AdminStates.SEND_ORDER_FILE)
async def send_file_invalid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é",
        reply_markup=get_cancel_keyboard()
    )


@router.callback_query(F.data == "admin_stats")
async def admin_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    db = await get_db_async()
    order_service = OrderService(db)
    user_service = UserService(db)
    
    stats = order_service.get_orders_statistics()
    users_count = user_service.get_users_count()
    
    db.close()
    
    stats_text = "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    stats_text += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {users_count}\n"
    stats_text += f"üìã <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {stats['total_orders']}\n\n"
    
    stats_text += "<b>üìà –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
    for status, count in stats['by_status'].items():
        if count > 0:
            status_text = get_status_text(OrderStatus(status))
            percentage = round(count / stats['total_orders'] * 100, 1) if stats['total_orders'] > 0 else 0
            stats_text += f"‚Ä¢ {status_text}: {count} ({percentage}%)\n"
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_admin_main_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminStates.BROADCAST_MESSAGE)
    
    await callback.message.answer(
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(AdminStates.BROADCAST_MESSAGE)
async def admin_broadcast_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_menu()
        )
        return
    
    db = await get_db_async()
    user_service = UserService(db)
    
    users = user_service.get_all_users(include_blocked=False)
    db.close()
    
    if not users:
        await state.clear()
        await message.answer(
            "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            reply_markup=get_main_menu()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    success_count = 0
    failed_count = 0
    
    from aiogram import Bot
    bot = Bot(token=settings.bot_token)
    
    broadcast_text = f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n{message.text}"
    
    for user in users:
        try:
            await bot.send_message(
                chat_id=user.telegram_id,
                text=broadcast_text,
                parse_mode="HTML"
            )
            success_count += 1
        except Exception as e:
            failed_count += 1
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    
    await state.clear()
    
    result_text = f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
    result_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
    result_text += f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
    result_text += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
    
    await message.answer(
        result_text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    
