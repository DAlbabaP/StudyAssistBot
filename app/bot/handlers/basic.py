from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from app.bot.keyboards.client import get_main_menu, get_contact_keyboard
from app.services.user_service import UserService
from app.database.connection import get_db_async
from app.config import settings

router = Router()


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = await get_db_async()
    user_service = UserService(db)
    
    user = user_service.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    db.close()
    
    welcome_text = f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç'}!</b>\n\n"
    welcome_text += "üéì –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —É—á–µ–±–Ω—É—é —Ä–∞–±–æ—Ç—É.\n\n"
    welcome_text += "üìù <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
    welcome_text += "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞—Ç—ã, –∫—É—Ä—Å–æ–≤—ã–µ, –¥–∏–ø–ª–æ–º—ã\n"
    welcome_text += "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç\n"
    welcome_text += "‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞\n"
    welcome_text += "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
    welcome_text += "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
    help_text += "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n"
    help_text += "1. –ù–∞–∂–º–∏—Ç–µ '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'\n"
    help_text += "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã\n"
    help_text += "3. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ —Ç–µ–º—É\n"
    help_text += "4. –û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
    help_text += "5. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n"
    help_text += "6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
    help_text += "üìã <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤:</b>\n"
    help_text += "–ù–∞–∂–º–∏—Ç–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞\n\n"
    help_text += "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
    help_text += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞\n\n"
    help_text += "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
    help_text += "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
    
    await message.answer(help_text, parse_mode="HTML")


@router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_command(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"""
    about_text = "üè¢ <b>–û –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ</b>\n\n"
    about_text += "üéì –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—á–µ–±–Ω—ã—Ö —Ä–∞–±–æ—Ç:\n"
    about_text += "‚Ä¢ –†–µ—Ñ–µ—Ä–∞—Ç—ã\n"
    about_text += "‚Ä¢ –ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã\n"
    about_text += "‚Ä¢ –î–∏–ø–ª–æ–º–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n"
    about_text += "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n"
    about_text += "‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ\n"
    about_text += "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n\n"
    about_text += "‚≠ê <b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
    about_text += "‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç\n"
    about_text += "‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤\n"
    about_text += "‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
    about_text += "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã\n"
    about_text += "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
    about_text += "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'"
    
    await message.answer(about_text, parse_mode="HTML")


@router.message(F.text == "‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    support_text = "üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
    support_text += "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, "
    support_text += "–≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:\n\n"
    support_text += "üì± <b>Telegram:</b> @support_username\n"
    support_text += "üìß <b>Email:</b> support@example.com\n"
    support_text += "‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (xxx) xxx-xx-xx\n\n"
    support_text += "üïê <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ü–Ω-–ü—Ç 9:00-18:00\n\n"
    support_text += "‚ö° –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!"
    
    await message.answer(support_text, parse_mode="HTML")


@router.message(F.text == "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
async def contact_received(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if message.contact:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = await get_db_async()
        user_service = UserService(db)
        
        user = user_service.get_user_by_telegram_id(message.from_user.id)
        if user:
            user_service.update_user(user, phone=message.contact.phone_number)
        
        db.close()
        
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É",
            reply_markup=get_contact_keyboard()
        )
