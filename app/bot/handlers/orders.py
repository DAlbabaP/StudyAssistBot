from aiogram import Router, F
from aiogram.types import Message, Document
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from app.bot.states.states import OrderStates
from app.bot.keyboards.client import (
    get_work_types, get_cancel_keyboard, get_skip_keyboard, 
    get_files_keyboard, get_confirm_keyboard, get_main_menu
)
from app.bot.utils.text_formatter import format_work_type, format_order_summary
from app.bot.utils.file_handler import save_file, is_allowed_file_type, format_file_size
from app.services.user_service import UserService
from app.services.order_service import OrderService
from app.database.connection import get_db_async
from app.config import settings

router = Router()


@router.message(F.text == "üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def new_order_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    await state.clear()
    await state.set_state(OrderStates.WORK_TYPE)
    
    text = "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:"
    
    await message.answer(
        text,
        reply_markup=get_work_types(),
        parse_mode="HTML"
    )


@router.message(StateFilter(OrderStates.WORK_TYPE))
async def process_work_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç
    work_types = [
        "üìö –†–µ—Ñ–µ—Ä–∞—Ç", "üìÑ –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", "üéì –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        "üìù –≠—Å—Å–µ", "üßÆ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ",
        "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "üìã –î—Ä—É–≥–æ–µ"
    ]
    
    if message.text not in work_types:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_work_types()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã
    await state.update_data(work_type=format_work_type(message.text))
    await state.set_state(OrderStates.SUBJECT)
    
    await message.answer(
        "üìö <b>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ò—Å—Ç–æ—Ä–∏—è, –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(StateFilter(OrderStates.SUBJECT))
async def process_subject(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return
    
    if len(message.text) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(subject=message.text)
    await state.set_state(OrderStates.TOPIC)
    
    await message.answer(
        "üìã <b>–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Ä–∞–±–æ—Ç—ã</b>\n\n–û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(StateFilter(OrderStates.TOPIC))
async def process_topic(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return
    
    if len(message.text) < 5:
        await message.answer(
            "‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(topic=message.text)
    await state.set_state(OrderStates.VOLUME)
    
    await message.answer(
        "üìè <b>–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã</b>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 20 —Å—Ç—Ä–∞–Ω–∏—Ü, 10 –ª–∏—Å—Ç–æ–≤, 5000 —Å–ª–æ–≤",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(StateFilter(OrderStates.VOLUME))
async def process_volume(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return
    
    await state.update_data(volume=message.text)
    await state.set_state(OrderStates.DEADLINE)
    
    await message.answer(
        "‚è∞ <b>–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ 15 –º–∞—è, —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é, –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(StateFilter(OrderStates.DEADLINE))
async def process_deadline(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return
    
    await state.update_data(deadline=message.text)
    await state.set_state(OrderStates.REQUIREMENTS)
    
    await message.answer(
        "üìÑ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–±–æ—Ç–µ, –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è, "
        "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∏ —Ç.–¥.\n\n"
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –µ—Å–ª–∏ –æ—Å–æ–±—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.",
        reply_markup=get_skip_keyboard(),
        parse_mode="HTML"
    )


@router.message(StateFilter(OrderStates.REQUIREMENTS))
async def process_requirements(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return
    
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        requirements = None
    else:
        requirements = message.text
    
    await state.update_data(requirements=requirements)
    await state.set_state(OrderStates.FILES)
    
    await message.answer(
        "üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã</b>\n\n"
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è, –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç, "
        "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, DOC, DOCX, TXT, JPG, PNG, ZIP –∏ –¥—Ä.\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'",
        reply_markup=get_files_keyboard(),
        parse_mode="HTML"
    )


@router.message(StateFilter(OrderStates.FILES), F.document)
async def process_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if document.file_size > 20 * 1024 * 1024:  # 20 –ú–ë
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({format_file_size(document.file_size)})\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if document.file_name and not is_allowed_file_type(document.file_name):
        await message.answer(
            f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {document.file_name}\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, DOC, DOCX, TXT, JPG, PNG, ZIP –∏ –¥—Ä."
        )
        return
    
    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º Document –æ–±—ä–µ–∫—Ç —Ü–µ–ª–∏–∫–æ–º
    data = await state.get_data()
    files = data.get('files', [])
    
    files.append({
        'file_id': document.file_id,
        'filename': document.file_name or f"–§–∞–π–ª_{len(files)+1}",
        'size': document.file_size,
        'mime_type': document.mime_type,
        'document': document  # üî• –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç Document
    })
    
    await state.update_data(files=files)
    
    filename_display = document.file_name or f"–§–∞–π–ª_{len(files)}"
    
    await message.answer(
        f"‚úÖ –§–∞–π–ª <b>{filename_display}</b> –¥–æ–±–∞–≤–ª–µ–Ω\n"
        f"üìä –†–∞–∑–º–µ—Ä: {format_file_size(document.file_size)}\n"
        f"üìé –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}",
        parse_mode="HTML"
    )


@router.message(StateFilter(OrderStates.FILES))
async def process_files_finish(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return
    
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É":
        await state.set_state(OrderStates.CONFIRM)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
        data = await state.get_data()
        summary = format_order_summary(data)
        
        await message.answer(
            summary,
            reply_markup=get_confirm_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'",
            reply_markup=get_files_keyboard()
        )


@router.message(StateFilter(OrderStates.CONFIRM))
async def process_confirm(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return
    
    if message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await state.set_state(OrderStates.WORK_TYPE)
        await message.answer(
            "‚úèÔ∏è –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:",
            reply_markup=get_work_types()
        )
        return
    
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        data = await state.get_data()
        
        db = await get_db_async()
        user_service = UserService(db)
        order_service = OrderService(db)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = user_service.get_user_by_telegram_id(message.from_user.id)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order = order_service.create_order(
                user_id=user.id,
                work_type=data['work_type'],
                subject=data['subject'],
                topic=data['topic'],
                volume=data['volume'],
                deadline=data['deadline'],
                requirements=data.get('requirements')
            )
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            files_saved = 0
            saved_files_info = []
            
            if data.get('files'):
                from aiogram import Bot
                
                bot = Bot(token=settings.bot_token)
                
                try:
                    for i, file_info in enumerate(data['files']):
                        try:
                            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π Document –æ–±—ä–µ–∫—Ç
                            document = file_info['document']
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                            saved_filename, file_path = await save_file(document, order.id, bot)
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                            file_type = None
                            if saved_filename and '.' in saved_filename:
                                file_type = saved_filename.split('.')[-1].lower()
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –ë–î
                            order_file = order_service.add_file_to_order(
                                order_id=order.id,
                                filename=saved_filename,  # üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                                file_path=file_path,
                                file_size=document.file_size,
                                file_type=file_type
                            )
                            
                            files_saved += 1
                            saved_files_info.append({
                                'original': file_info['filename'],
                                'saved': saved_filename,
                                'path': file_path
                            })
                            
                            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_info['filename']} -> {saved_filename}")
                            
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_info.get('filename', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}: {e}")
                            continue
                    
                finally:
                    await bot.session.close()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
            order_id = order.id
            user_data = {
                'first_name': user.first_name,
                'last_name': user.last_name,
                'username': user.username,
                'telegram_id': user.telegram_id
            }
            
        finally:
            db.close()
        
        await state.clear()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        success_text += "üìã –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
        
        if files_saved > 0:
            success_text += f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_saved}\n"
            success_text += "\nüìÅ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n"
            for file_info in saved_files_info:
                success_text += f"‚Ä¢ {file_info['saved']}\n"
        
        success_text += "\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n"
        success_text += "üì± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'"
        
        await message.answer(
            success_text,
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        await send_admin_notification(order_id, user_data, data, files_saved, saved_files_info)
    
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_confirm_keyboard()
        )


async def send_admin_notification(order_id: int, user_data: dict, order_data: dict, files_count: int = 0, files_info: list = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        from aiogram import Bot
        
        bot = Bot(token=settings.bot_token)
        
        admin_text = f"üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}</b>\n\n"
        admin_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_data['first_name']}"
        if user_data['last_name']:
            admin_text += f" {user_data['last_name']}"
        if user_data['username']:
            admin_text += f" (@{user_data['username']})"
        admin_text += f"\nüì± <b>Telegram ID:</b> {user_data['telegram_id']}\n\n"
        
        admin_text += f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {order_data['work_type']}\n"
        admin_text += f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order_data['subject']}\n"
        admin_text += f"üìã <b>–¢–µ–º–∞:</b> {order_data['topic']}\n"
        admin_text += f"üìè <b>–û–±—ä–µ–º:</b> {order_data['volume']}\n"
        admin_text += f"‚è∞ <b>–°—Ä–æ–∫:</b> {order_data['deadline']}\n"
        
        if order_data.get('requirements'):
            requirements_preview = order_data['requirements'][:200]
            if len(order_data['requirements']) > 200:
                requirements_preview += "..."
            admin_text += f"üìå <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b> {requirements_preview}\n"
        
        if files_count > 0:
            admin_text += f"\nüìé <b>–§–∞–π–ª–æ–≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ:</b> {files_count}\n"
            if files_info:
                admin_text += "<b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n"
                for file_info in files_info[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                    admin_text += f"‚Ä¢ {file_info['saved']}\n"
                if len(files_info) > 5:
                    admin_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(files_info) - 5} —Ñ–∞–π–ª–æ–≤\n"
        
        admin_text += f"\nüîó <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b> http://127.0.0.1:8000/orders/{order_id}\n"
        admin_text += f"\nüíº –ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            chat_id=settings.admin_user_id,
            text=admin_text,
            parse_mode="HTML"
        )
        
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")