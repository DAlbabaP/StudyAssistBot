from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from app.bot.keyboards.client import get_main_menu, get_order_status_keyboard
from app.services.order_service import OrderService
from app.services.user_service import UserService
from app.database.connection import get_db_async
from app.database.models import OrderStatus, STATUS_EMOJI
from app.config import settings

router = Router()


@router.callback_query(F.data.startswith("accept_price:"))
async def accept_price_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        order_id = int(callback.data.split(":")[1])
        
        db = await get_db_async()
        try:
            order_service = OrderService(db)
            order = order_service.get_order_by_id(order_id)
            
            if not order:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            if order.user.telegram_id != callback.from_user.id:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑", show_alert=True)
                return
            
            if not order.price:
                await callback.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", show_alert=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–∂–¥–µ—Ç –æ–ø–ª–∞—Ç—ã"
            success = order_service.update_order_status(order_id, OrderStatus.WAITING_PAYMENT)
            
            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
                order_data = {
                    'id': order.id,
                    'price': order.price,
                    'work_type': order.work_type,
                    'topic': order.topic,
                    'user_first_name': order.user.first_name,
                    'user_last_name': order.user.last_name,
                    'user_username': order.user.username
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback.message.edit_text(
                    f"‚úÖ <b>–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ü–µ–Ω—É {order_data['price']} ‚ÇΩ</b>\n\n"
                    f"üìã <b>–ó–∞–∫–∞–∑ #{order_data['id']}</b>\n"
                    f"üìù {order_data['work_type']}: {order_data['topic'][:50]}...\n\n"
                    f"üí∞ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\n"
                    f"üìû –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode="HTML",
                    reply_markup=get_order_status_keyboard(order_id)
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ü–µ–Ω—ã
                await send_admin_notification_accept(order_data)
                
                await callback.answer("‚úÖ –¶–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
        finally:
            db.close()
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ü–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("decline_price:"))
async def decline_price_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        order_id = int(callback.data.split(":")[1])
        
        db = await get_db_async()
        try:
            order_service = OrderService(db)
            order = order_service.get_order_by_id(order_id)
            
            if not order:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            if order.user.telegram_id != callback.from_user.id:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑", show_alert=True)
                return
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–Ω–æ–≤—ã–π" –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω—ã
            success = order_service.update_order_status(order_id, OrderStatus.NEW)
            
            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
                order_data = {
                    'id': order.id,
                    'price': order.price,
                    'work_type': order.work_type,
                    'topic': order.topic,
                    'user_first_name': order.user.first_name,
                    'user_last_name': order.user.last_name,
                    'user_username': order.user.username
                }
                
                await callback.message.edit_text(
                    f"‚ùå <b>–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Ü–µ–Ω—É {order_data['price']} ‚ÇΩ</b>\n\n"
                    f"üìã <b>–ó–∞–∫–∞–∑ #{order_data['id']}</b>\n"
                    f"üìù {order_data['work_type']}: {order_data['topic'][:50]}...\n\n"
                    f"üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>–ù–æ–≤—ã–π</b>\n\n"
                    f"üí≠ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç —Ü–µ–Ω—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                    parse_mode="HTML",
                    reply_markup=get_order_status_keyboard(order_id)
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                await send_admin_notification_decline(order_data)
                
                await callback.answer("‚ùå –¶–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
        finally:
            db.close()
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("view_order:"))
async def view_order_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    try:
        order_id = int(callback.data.split(":")[1])
        
        db = await get_db_async()
        try:
            order_service = OrderService(db)
            order = order_service.get_order_by_id(order_id)
            
            if not order:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            if order.user.telegram_id != callback.from_user.id:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = STATUS_EMOJI.get(order.status, "üìã")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            order_info = f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n"
            order_info += f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {order.work_type}\n"
            order_info += f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order.subject}\n"
            order_info += f"üìã <b>–¢–µ–º–∞:</b> {order.topic}\n"
            order_info += f"üìè <b>–û–±—ä–µ–º:</b> {order.volume}\n"
            order_info += f"‚è∞ <b>–°—Ä–æ–∫:</b> {order.deadline}\n"
            
            if order.requirements:
                order_info += f"üìå <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b> {order.requirements[:200]}"
                if len(order.requirements) > 200:
                    order_info += "..."
                order_info += "\n"
            
            order_info += f"\n{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {order.status.value}\n"
            
            if order.price:
                order_info += f"üí∞ <b>–¶–µ–Ω–∞:</b> {order.price} ‚ÇΩ\n"
            
            order_info += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await callback.message.edit_text(
                order_info,
                parse_mode="HTML",
                reply_markup=None
            )
            
            await callback.answer()
        finally:
            db.close()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def send_admin_notification_accept(order_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ü–µ–Ω—ã"""
    try:
        from aiogram import Bot
        
        bot = Bot(token=settings.bot_token)
        
        admin_text = f"‚úÖ <b>–¶–ï–ù–ê –ü–†–ò–ù–Ø–¢–ê</b>\n\n"
        admin_text += f"üìã <b>–ó–∞–∫–∞–∑ #{order_data['id']}</b>\n"
        admin_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data['user_first_name']}"
        if order_data['user_last_name']:
            admin_text += f" {order_data['user_last_name']}"
        if order_data['user_username']:
            admin_text += f" (@{order_data['user_username']})"
        admin_text += f"\nüí∞ <b>–¶–µ–Ω–∞:</b> {order_data['price']} ‚ÇΩ\n"
        admin_text += f"üìù <b>–†–∞–±–æ—Ç–∞:</b> {order_data['work_type']}\n"
        admin_text += f"üìã <b>–¢–µ–º–∞:</b> {order_data['topic'][:100]}...\n\n"
        admin_text += f"üîó <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b> http://127.0.0.1:8000/orders/{order_data['id']}\n\n"
        admin_text += f"‚è∞ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</b>"
        
        await bot.send_message(
            chat_id=settings.admin_user_id,
            text=admin_text,
            parse_mode="HTML"
        )
        
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –ø—Ä–∏–Ω—è—Ç–∏–∏: {e}")


async def send_admin_notification_decline(order_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
    try:
        from aiogram import Bot
        
        bot = Bot(token=settings.bot_token)
        
        admin_text = f"‚ùå <b>–¶–ï–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ê</b>\n\n"
        admin_text += f"üìã <b>–ó–∞–∫–∞–∑ #{order_data['id']}</b>\n"
        admin_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data['user_first_name']}"
        if order_data['user_last_name']:
            admin_text += f" {order_data['user_last_name']}"
        if order_data['user_username']:
            admin_text += f" (@{order_data['user_username']})"
        admin_text += f"\nüí∞ <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:</b> {order_data['price']} ‚ÇΩ\n"
        admin_text += f"üìù <b>–†–∞–±–æ—Ç–∞:</b> {order_data['work_type']}\n"
        admin_text += f"üìã <b>–¢–µ–º–∞:</b> {order_data['topic'][:100]}...\n\n"
        admin_text += f"üîó <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b> http://127.0.0.1:8000/orders/{order_data['id']}\n\n"
        admin_text += f"üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>–ù–æ–≤—ã–π</b>\n"
        admin_text += f"üí≠ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Ü–µ–Ω—ã!"
        
        await bot.send_message(
            chat_id=settings.admin_user_id,
            text=admin_text,
            parse_mode="HTML"
        )
        
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")