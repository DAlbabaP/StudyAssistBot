from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.bot.keyboards.client import get_main_menu
from app.bot.keyboards.inline import (
    get_orders_pagination_keyboard, get_order_details_keyboard, 
    get_order_action_keyboard
)
from app.bot.utils.text_formatter import format_order_list, format_order_info
from app.services.user_service import UserService
from app.services.order_service import OrderService
from app.database.connection import get_db_async

router = Router()


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.clear()
    
    db = await get_db_async()
    user_service = UserService(db)
    order_service = OrderService(db)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = user_service.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            reply_markup=get_main_menu()
        )
        db.close()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = order_service.get_user_orders(user.id, page=1, per_page=5)
    
    db.close()
    
    if not result['orders']:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑'",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    text = format_order_list(result['orders'], result['page'], result['total_pages'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    keyboard = None
    if result['total_pages'] > 1:
        keyboard = get_orders_pagination_keyboard(
            result['page'], 
            result['total_pages'], 
            user.id
        )
    
    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("orders_page:"))
async def orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    _, page_str, user_id_str = callback.data.split(":")
    page = int(page_str)
    
    db = await get_db_async()
    order_service = OrderService(db)
    
    if user_id_str == "all":
        # –ê–¥–º–∏–Ω —Å–º–æ—Ç—Ä–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
        result = order_service.get_orders_by_status(page=page, per_page=5)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
        user_id = int(user_id_str)
        result = order_service.get_user_orders(user_id, page=page, per_page=5)
    
    db.close()
    
    if not result['orders']:
        await callback.answer("–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    text = format_order_list(result['orders'], result['page'], result['total_pages'])
    
    keyboard = None
    if result['total_pages'] > 1:
        keyboard = get_orders_pagination_keyboard(
            result['page'], 
            result['total_pages'],
            int(user_id_str) if user_id_str != "all" else None
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("order_details:"))
async def order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    order_id = int(callback.data.split(":")[1])
    
    db = await get_db_async()
    order_service = OrderService(db)
    user_service = UserService(db)
    
    order = order_service.get_order_by_id(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        db.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    user = user_service.get_user_by_telegram_id(callback.from_user.id)
    is_admin = callback.from_user.id == settings.admin_id
    
    if not is_admin and (not user or order.user_id != user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É")
        db.close()
        return
    
    db.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if is_admin:
        from app.bot.utils.text_formatter import format_admin_order_info
        text = format_admin_order_info(order)
    else:
        text = format_order_info(order, detailed=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    if order.files:
        text += f"\nüìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n"
        for file in order.files:
            from app.bot.utils.file_handler import get_file_type_emoji, format_file_size
            emoji = get_file_type_emoji(file.filename)
            size = format_file_size(file.file_size) if file.file_size else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text += f"{emoji} {file.filename} ({size})\n"
    
    keyboard = get_order_details_keyboard(order_id, is_admin)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_orders")
async def back_to_orders(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_admin = callback.from_user.id == settings.admin_id
    
    db = await get_db_async()
    order_service = OrderService(db)
    
    if is_admin:
        result = order_service.get_orders_by_status(page=1, per_page=5)
    else:
        user_service = UserService(db)
        user = user_service.get_user_by_telegram_id(callback.from_user.id)
        result = order_service.get_user_orders(user.id, page=1, per_page=5)
    
    db.close()
    
    text = format_order_list(result['orders'], result['page'], result['total_pages'])
    
    keyboard = None
    if result['total_pages'] > 1:
        keyboard = get_orders_pagination_keyboard(
            result['page'], 
            result['total_pages'],
            None if is_admin else user.id
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "current_page")
async def current_page_callback(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
