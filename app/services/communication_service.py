import os
import asyncio
from typing import Optional, List
from sqlalchemy.orm import Session
from aiogram import Bot
from aiogram.types import FSInputFile
from datetime import datetime
from pathlib import Path

from app.config import settings
from app.database.models.order import Order
from app.database.models.file import OrderFile
from app.database.models.message import OrderMessage


class CommunicationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –∞–¥–º–∏–Ω–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, db: Session):
        self.db = db
    
    async def send_message_to_user(self, order_id: int, message_text: str, from_admin: bool = True) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            from_admin: True –µ—Å–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = self.db.query(Order).filter(Order.id == order_id).first()
            if not order:
                print(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            bot = Bot(token=settings.bot_token)
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if from_admin:
                    formatted_message = f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                    formatted_message += f"üìã <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
                    formatted_message += f"üìù {order.work_type}: {order.short_topic}\n\n"
                    formatted_message += f"<i>{message_text}</i>"
                else:
                    formatted_message = message_text
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                telegram_message = await bot.send_message(
                    chat_id=order.user.telegram_id,
                    text=formatted_message,
                    parse_mode="HTML"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                order_message = OrderMessage(
                    order_id=order_id,
                    message_text=message_text,
                    from_admin=from_admin,
                    delivered=True,
                    telegram_message_id=telegram_message.message_id
                )
                
                self.db.add(order_message)
                self.db.commit()
                
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {order.user.telegram_id} –ø–æ –∑–∞–∫–∞–∑—É #{order_id}")
                return True
                
            finally:
                await bot.session.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                order_message = OrderMessage(
                    order_id=order_id,
                    message_text=message_text,
                    from_admin=from_admin,
                    delivered=False
                )
                
                self.db.add(order_message)
                self.db.commit()
            except:
                pass
            
            return False
    
    async def send_file_to_user(self, order_id: int, file_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            file_id: ID —Ñ–∞–π–ª–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ —Ñ–∞–π–ª
            order = self.db.query(Order).filter(Order.id == order_id).first()
            if not order:
                print(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            file_record = self.db.query(OrderFile).filter(OrderFile.id == file_id).first()
            if not file_record:
                print(f"‚ùå –§–∞–π–ª #{file_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
            if not os.path.exists(file_record.file_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ: {file_record.file_path}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            bot = Bot(token=settings.bot_token)
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                caption = f"üìé <b>–§–∞–π–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                caption += f"üìã <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
                caption += f"üìù {order.work_type}: {order.short_topic}\n\n"
                caption += f"üìÑ –§–∞–π–ª: <b>{file_record.filename}</b>\n"
                if file_record.file_size:
                    caption += f"üìä –†–∞–∑–º–µ—Ä: {file_record.size_mb} MB"
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                input_file = FSInputFile(
                    path=file_record.file_path,
                    filename=file_record.filename
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                await bot.send_document(
                    chat_id=order.user.telegram_id,
                    document=input_file,
                    caption=caption,
                    parse_mode="HTML"
                )
                
                # –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                file_record.sent_to_user = True
                file_record.sent_at = datetime.utcnow()
                self.db.commit()
                
                print(f"‚úÖ –§–∞–π–ª {file_record.filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {order.user.telegram_id}")
                
                # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                await self.send_message_to_user(
                    order_id, 
                    f"üìé –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_record.filename}"
                )
                
                return True
                
            finally:
                await bot.session.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def get_order_messages(self, order_id: int) -> List[OrderMessage]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑—É"""
        return self.db.query(OrderMessage)\
            .filter(OrderMessage.order_id == order_id)\
            .order_by(OrderMessage.sent_at.desc())\
            .all()
    
    def save_admin_file(self, order_id: int, file_path: str, original_filename: str, 
                       file_size: int = None) -> OrderFile:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–æ–º
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            file_path: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            original_filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_size: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            
        Returns:
            OrderFile: –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_type = None
        if '.' in original_filename:
            file_type = original_filename.split('.')[-1].lower()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        order_file = OrderFile(
            order_id=order_id,
            filename=original_filename,
            file_path=file_path,
            file_size=file_size,
            file_type=file_type,
            uploaded_by_admin=True,  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–æ–º
            sent_to_user=False
        )
        
        self.db.add(order_file)
        self.db.commit()
        self.db.refresh(order_file)
        
        print(f"‚úÖ –§–∞–π–ª –æ—Ç –∞–¥–º–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_filename} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        return order_file
    # –û–±–Ω–æ–≤–∏—Ç–µ app/services/communication_service.py - –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã:

    async def save_user_message(self, order_id: int, message_text: str, 
                               telegram_message_id: int = None) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            telegram_message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            order = self.db.query(Order).filter(Order.id == order_id).first()
            if not order:
                print(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            order_message = OrderMessage(
                order_id=order_id,
                message_text=message_text,
                from_admin=False,  # –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                delivered=True,    # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–æ—à–ª–æ –¥–æ –Ω–∞—Å
                telegram_message_id=telegram_message_id
            )
            
            self.db.add(order_message)
            self.db.commit()
            
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            self.db.rollback()
            return False
    
    def get_dialog_messages(self, order_id: int, limit: int = 50) -> List[OrderMessage]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∑–∞–∫–∞–∑—É (–æ—Ç –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            List[OrderMessage]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        """
        return self.db.query(OrderMessage)\
            .filter(OrderMessage.order_id == order_id)\
            .order_by(OrderMessage.sent_at.asc())\
            .limit(limit)\
            .all()
    
    def get_unread_user_messages_count(self, order_id: int) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        (—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫–µ)
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        # –ü–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ "–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ "viewed_by_admin"
        return self.db.query(OrderMessage)\
            .filter(
                OrderMessage.order_id == order_id,
                OrderMessage.from_admin == False
            )\
            .count()
    
    def get_recent_user_messages(self, limit: int = 10) -> List[dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            List[dict]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        from sqlalchemy import desc
        
        messages = self.db.query(OrderMessage)\
            .filter(OrderMessage.from_admin == False)\
            .order_by(desc(OrderMessage.sent_at))\
            .limit(limit)\
            .all()
        
        result = []
        for message in messages:
            result.append({
                'message_id': message.id,
                'order_id': message.order_id,
                'order_topic': message.order.short_topic,
                'user_name': message.order.user.full_name,
                'user_username': message.order.user.username,
                'message_text': message.message_preview,
                'sent_at': message.sent_at,
                'delivered': message.delivered
            })
        
        return result