from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, desc
from app.database.models.order import Order
from app.database.models.file import OrderFile
from app.database.models.status_history import StatusHistory
from app.database.models import OrderStatus
from app.database.models.user import User
from typing import Optional, List, Dict, Any
from datetime import datetime
import math


class OrderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def create_order(self, user_id: int, work_type: str, subject: str, 
                    topic: str, volume: str, deadline: str, 
                    requirements: str = None) -> Order:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        order = Order(
            user_id=user_id,
            work_type=work_type,
            subject=subject,
            topic=topic,
            volume=volume,
            deadline=deadline,
            requirements=requirements,
            status=OrderStatus.NEW
        )
        self.db.add(order)
        self.db.commit()
        self.db.refresh(order)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
        self.add_status_history(order.id, None, OrderStatus.NEW, "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω")
        
        return order
    
    def get_order_by_id(self, order_id: int) -> Optional[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID"""
        return self.db.query(Order).filter(Order.id == order_id).first()
    
    def get_user_orders(self, user_id: int, page: int = 1, per_page: int = 10) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        query = self.db.query(Order).filter(Order.user_id == user_id).order_by(desc(Order.created_at))
        
        total = query.count()
        orders = query.offset((page - 1) * per_page).limit(per_page).all()
        
        return {
            'orders': orders,
            'total': total,
            'page': page,
            'per_page': per_page,
            'total_pages': math.ceil(total / per_page) if total > 0 else 1        }

    def get_orders_by_status(self, status: OrderStatus = None, page: int = 1, 
                           per_page: int = 10) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        query = self.db.query(Order).order_by(desc(Order.created_at))
        
        if status:
            query = query.filter(Order.status == status)
        
        total = query.count()
        orders = query.offset((page - 1) * per_page).limit(per_page).all()
        
        return {
            'orders': orders,
            'total': total,
            'page': page,
            'per_page': per_page,
            'total_pages': math.ceil(total / per_page) if total > 0 else 1
        }

    def update_order_status(self, order_id: int, new_status: OrderStatus, note: str = None) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
        order = self.get_order_by_id(order_id)
        if not order:
            return False

        old_status = order.status
        order.status = new_status
        order.updated_at = datetime.utcnow()
        
        self.db.commit()
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.add_status_history(order_id, old_status, new_status, note)
        
        return True

    def update_order_price(self, order_id: int, price: float) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
        order = self.get_order_by_id(order_id)
        if not order:
            return False

        old_price = order.price
        order.price = price
        order.updated_at = datetime.utcnow()
        self.db.commit()
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–π —Ü–µ–Ω–µ
        self._send_price_notification(order, old_price, price)
        
        return True
    
    def _send_price_notification(self, order: Order, old_price: float, new_price: float):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        try:
            import asyncio
            import threading
            from app.bot.bot import bot
            from app.bot.keyboards.client import get_price_response_keyboard
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Å—Å–∏–µ–π
            user_telegram_id = order.user.telegram_id
            order_id = order.id
            work_type = order.work_type
            topic = order.topic
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if old_price is None:
                notification_text = f"üí∞ <b>–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!</b>\n\n"
            else:
                notification_text = f"üí∞ <b>–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!</b>\n\n"
            
            notification_text += f"üìã <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
            notification_text += f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
            notification_text += f"üìã <b>–¢–µ–º–∞:</b> {topic[:50]}...\n\n"
            
            if old_price is not None:
                notification_text += f"üí∞ <b>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:</b> {old_price} ‚ÇΩ\n"
            
            notification_text += f"üí∞ <b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {new_price} ‚ÇΩ\n\n"
            notification_text += f"‚ùì <b>–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–µ–Ω—É?</b>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def send_notification_sync():
                async def send_notification():
                    try:
                        await bot.send_message(
                            chat_id=user_telegram_id,
                            text=notification_text,
                            parse_mode="HTML",
                            reply_markup=get_price_response_keyboard(order_id)
                        )
                        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(send_notification())
                finally:
                    loop.close()
              # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=send_notification_sync)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ: {e}")
    
    def add_status_history(self, order_id: int, old_status: OrderStatus, 
                          new_status: OrderStatus, note: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤"""
        history = StatusHistory(
            order_id=order_id,
            old_status=old_status,
            new_status=new_status,
            note=note
        )
        self.db.add(history)
        self.db.commit()
    
    def add_file_to_order(self, order_id: int, filename: str, file_path: str, 
                         file_size: int = None, file_type: str = None) -> OrderFile:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫ –∑–∞–∫–∞–∑—É"""
        order_file = OrderFile(
            order_id=order_id,
            filename=filename,
            file_path=file_path,
            file_size=file_size,
            file_type=file_type
        )
        self.db.add(order_file)
        self.db.commit()
        self.db.refresh(order_file)
        return order_file
    
    def get_order_files(self, order_id: int) -> List[OrderFile]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–∞"""
        return self.db.query(OrderFile).filter(OrderFile.order_id == order_id).all()
    
    def get_orders_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
        total_orders = self.db.query(Order).count()
        
        stats = {
            'total_orders': total_orders,
            'by_status': {}
        }
        
        for status in OrderStatus:
            count = self.db.query(Order).filter(Order.status == status).count()
            stats['by_status'][status.value] = count
        
        return stats
    
    def search_orders(self, query: str, page: int = 1, per_page: int = 10) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        search_query = self.db.query(Order).filter(
            or_(
                Order.topic.ilike(f'%{query}%'),
                Order.subject.ilike(f'%{query}%'),
                Order.work_type.ilike(f'%{query}%')
            )
        ).order_by(desc(Order.created_at))
        
        total = search_query.count()
        orders = search_query.offset((page - 1) * per_page).limit(per_page).all()
        
        return {
            'orders': orders,
            'total': total,
            'page': page,
            'per_page': per_page,
            'total_pages': math.ceil(total / per_page) if total > 0 else 1
        }
