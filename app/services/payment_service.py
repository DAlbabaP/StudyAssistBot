"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
"""
from typing import Optional
from sqlalchemy.orm import Session
from datetime import datetime

from app.config import settings
from app.database.models.order import Order
from app.database.models.payment import OrderPayment
from app.database.models.file import OrderFile
from app.database.models.enums import OrderStatus


class PaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def create_payment_request(self, order_id: int) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            
        Returns:
            str: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        """
        order = self.db.query(Order).filter(Order.id == order_id).first()
        if not order:
            raise ValueError(f"–ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not order.price:
            raise ValueError(f"–¶–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        payment = OrderPayment(
            order_id=order_id,
            amount=order.price
        )
        self.db.add(payment)
        self.db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        payment_message = f"""üí∞ <b>–ó–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ!</b>

üìù <b>–†–∞–±–æ—Ç–∞:</b> {order.work_type.replace('_', ' ').title()}
üìã <b>–¢–µ–º–∞:</b> {order.short_topic}
üíµ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {order.price:,.2f} ‚ÇΩ

{settings.payment_instructions.format(
    card_number=settings.payment_card_number,
    phone=settings.payment_sbp_phone, 
    bank=settings.payment_bank_name,
    receiver=settings.payment_receiver_name,
    order_id=order_id
)}

üîç <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞!</b>
"""
        
        return payment_message
    
    def process_payment_screenshot(self, order_id: int, file_id: int, 
                                 user_message: str = None) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            file_id: ID —Ñ–∞–π–ª–∞ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = self.db.query(Order).filter(Order.id == order_id).first()
            if not order:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ –∑–∞–∫–∞–∑—É
            payment = self.db.query(OrderPayment)\
                .filter(OrderPayment.order_id == order_id)\
                .order_by(OrderPayment.created_at.desc())\
                .first()
            
            if not payment:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                payment = OrderPayment(
                    order_id=order_id,
                    amount=order.price or 0
                )
                self.db.add(payment)
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫ –ø–ª–∞—Ç–µ–∂—É
            payment.screenshot_file_id = file_id
            payment.screenshot_message = user_message
            
            self.db.commit()
            print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã: {e}")
            self.db.rollback()
            return False
    
    def verify_payment(self, payment_id: int, admin_user_id: int) -> bool:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            admin_user_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
        """
        try:
            payment = self.db.query(OrderPayment).filter(OrderPayment.id == payment_id).first()
            if not payment:
                return False
            
            payment.is_verified = True
            payment.is_rejected = False
            payment.verified_at = datetime.utcnow()
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            order = payment.order
            order.status = OrderStatus.SENT
            order.updated_at = datetime.utcnow()
            
            self.db.commit()
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ #{payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            self.db.rollback()
            return False
    
    def reject_payment(self, payment_id: int, reason: str, admin_user_id: int) -> bool:
        """
        –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            admin_user_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
        """
        try:
            payment = self.db.query(OrderPayment).filter(OrderPayment.id == payment_id).first()
            if not payment:
                return False
            
            payment.is_rejected = True
            payment.is_verified = False
            payment.rejection_reason = reason
            payment.rejected_at = datetime.utcnow()
            
            self.db.commit()
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ #{payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            self.db.rollback()
            return False
    
    def get_pending_payments(self, limit: int = 20):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
        return self.db.query(OrderPayment)\
            .filter(
                OrderPayment.is_verified == False,
                OrderPayment.is_rejected == False,
                OrderPayment.screenshot_file_id.isnot(None)
            )\
            .order_by(OrderPayment.created_at.desc())\
            .limit(limit)\
            .all()
    
    def get_order_payments(self, order_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∑–∞–∫–∞–∑—É"""
        return self.db.query(OrderPayment)\
            .filter(OrderPayment.order_id == order_id)\
            .order_by(OrderPayment.created_at.desc())\
            .all()
