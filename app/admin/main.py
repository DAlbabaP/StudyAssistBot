from fastapi import FastAPI, Request, Form, Depends, HTTPException, status
from fastapi.responses import HTMLResponse, RedirectResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from sqlalchemy.orm import Session
from typing import Optional
import os

from fastapi import UploadFile, File, BackgroundTasks
from app.services.communication_service import CommunicationService
import aiofiles
import uuid
from pathlib import Path


from app.config import settings
from app.database.connection import get_db
from app.services.user_service import UserService
from app.services.order_service import OrderService
from app.database.models import OrderStatus


from fastapi.exception_handlers import (
    http_exception_handler,
    request_validation_exception_handler,
)
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(title="Telegram Bot Admin Panel")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware –¥–ª—è —Å–µ—Å—Å–∏–π
app.add_middleware(SessionMiddleware, secret_key=settings.secret_key)


def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return app


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
app.mount("/static", StaticFiles(directory="app/admin/static"), name="static")
templates = Jinja2Templates(directory="app/admin/templates")


# –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é)
def verify_admin(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_session = request.session.get("admin_authenticated")
    if not admin_session:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        )


@app.get("/", response_class=HTMLResponse)
async def admin_login_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if request.session.get("admin_authenticated"):
        return RedirectResponse("/dashboard", status_code=302)
    
    return templates.TemplateResponse(
        "login.html", 
        {"request": request}
    )


@app.post("/login")
async def admin_login(
    request: Request,
    password: str = Form(...),
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é)
    if password == "admin123":  # –ü–æ–º–µ–Ω—è–π—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
        request.session["admin_authenticated"] = True
        return RedirectResponse("/dashboard", status_code=302)
    
    return templates.TemplateResponse(
        "login.html",
        {
            "request": request, 
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
        }
    )


@app.get("/logout")
async def admin_logout(request: Request):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    request.session.clear()
    return RedirectResponse("/", status_code=302)


@app.get("/dashboard", response_class=HTMLResponse)
async def admin_dashboard(
    request: Request,
    db: Session = Depends(get_db)
):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    verify_admin(request)
    
    user_service = UserService(db)
    order_service = OrderService(db)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = order_service.get_orders_statistics()
    users_count = user_service.get_users_count()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
    recent_orders = order_service.get_orders_by_status(page=1, per_page=5)
    
    return templates.TemplateResponse(
        "dashboard.html",
        {
            "request": request,
            "stats": stats,
            "users_count": users_count,
            "recent_orders": recent_orders['orders']
        }
    )

@app.get("/admin/recent_messages")
async def get_recent_user_messages(
    request: Request,
    limit: int = 20,
    db: Session = Depends(get_db)
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    verify_admin(request)
    
    communication_service = CommunicationService(db)
    recent_messages = communication_service.get_recent_user_messages(limit)
    
    return {
        "messages_count": len(recent_messages),
        "messages": recent_messages
    }


@app.get("/orders/{order_id}/unread_count")
async def get_unread_messages_count(
    request: Request,
    order_id: int,
    db: Session = Depends(get_db)
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    verify_admin(request)
    
    communication_service = CommunicationService(db)
    unread_count = communication_service.get_unread_user_messages_count(order_id)
    
    return {
        "order_id": order_id,
        "unread_count": unread_count
    }


@app.get("/orders", response_class=HTMLResponse)
async def admin_orders(
    request: Request,
    page: int = 1,
    status_filter: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    verify_admin(request)
    
    order_service = OrderService(db)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    status = None
    if status_filter and status_filter != "all":
        try:
            status = OrderStatus(status_filter)
        except ValueError:
            status = None
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
    result = order_service.get_orders_by_status(status, page=page, per_page=10)
    
    return templates.TemplateResponse(
        "orders.html",
        {
            "request": request,
            "orders": result['orders'],
            "pagination": result,
            "current_filter": status_filter or "all",
            "statuses": list(OrderStatus)
        }
    )


@app.get("/orders/{order_id}", response_class=HTMLResponse)
async def admin_order_detail(
    request: Request,
    order_id: int,
    db: Session = Depends(get_db)
):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–∞"""
    verify_admin(request)
    
    order_service = OrderService(db)
    order = order_service.get_order_by_id(order_id)
    
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–∞
    print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}")
    
    # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ relationship (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    files_via_relationship = order.files
    print(f"   –§–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ relationship: {len(files_via_relationship)}")
    
    # –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    files_via_service = order_service.get_order_files(order_id)
    print(f"   –§–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {len(files_via_service)}")
    
    # –°–ø–æ—Å–æ–± 3: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    from app.database.models.file import OrderFile
    files_direct = db.query(OrderFile).filter(OrderFile.order_id == order_id).all()
    print(f"   –§–∞–π–ª–æ–≤ –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º: {len(files_direct)}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    order.files = files_direct
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if files_direct:
        print("   üìé –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in files_direct:
            print(f"      ‚Ä¢ ID: {file.id}, –ò–º—è: {file.filename}")
            print(f"        –ü—É—Ç—å: {file.file_path}")
            print(f"        –†–∞–∑–º–µ—Ä: {file.file_size}")
            print(f"        –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(file.file_path) if file.file_path else False}")
    else:
        print("   üìé –§–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    return templates.TemplateResponse(
        "order_detail.html",
        {
            "request": request,
            "order": order,
            "statuses": list(OrderStatus)
        }
    )


@app.post("/orders/{order_id}/status")
async def update_order_status(
    request: Request,
    order_id: int,
    new_status: str = Form(...),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    verify_admin(request)
    
    order_service = OrderService(db)
    communication_service = CommunicationService(db)
    
    try:
        status = OrderStatus(new_status)
        success = order_service.update_order_status(order_id, status, "–ò–∑–º–µ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-–ø–∞–Ω–µ–ª—å")
        
        if success:
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            if status == OrderStatus.WAITING_PAYMENT:
                from app.services.payment_service import PaymentService
                payment_service = PaymentService(db)
                
                try:
                    payment_message = payment_service.create_payment_request(order_id)
                    await communication_service.send_message_to_user(
                        order_id, 
                        payment_message, 
                        from_admin=True
                    )
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: {e}")
            
            return RedirectResponse(f"/orders/{order_id}?success=status_updated", status_code=302)
        else:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å")


@app.post("/orders/{order_id}/price")
async def update_order_price(
    request: Request,
    order_id: int,
    price: float = Form(...),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    verify_admin(request)
    
    try:
        order_service = OrderService(db)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
        if price <= 0:
            raise HTTPException(status_code=400, detail="–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        if price > 1000000:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 1 –º–ª–Ω —Ä—É–±–ª–µ–π
            raise HTTPException(status_code=400, detail="–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order = order_service.get_order_by_id(order_id)
        if not order:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        success = order_service.update_order_price(order_id, price)
        
        if success:
            return RedirectResponse(f"/orders/{order_id}?success=price_updated", status_code=302)
        else:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã")
            
    except ValueError as e:
        raise HTTPException(status_code=400, detail=f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã: {str(e)}")
    except Exception as e:
        print(f"Error updating price: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@app.get("/users", response_class=HTMLResponse)
async def admin_users(
    request: Request,
    page: int = 1,
    db: Session = Depends(get_db)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    verify_admin(request)
    
    user_service = UserService(db)
    users = user_service.get_all_users(include_blocked=True)
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    per_page = 20
    total = len(users)
    start = (page - 1) * per_page
    end = start + per_page
    users_page = users[start:end]
    
    total_pages = (total + per_page - 1) // per_page
    
    return templates.TemplateResponse(
        "users.html",
        {
            "request": request,
            "users": users_page,
            "pagination": {
                "page": page,
                "total_pages": total_pages,
                "total": total
            }
        }
    )

@app.get("/admin/dashboard_stats")
async def get_dashboard_stats(
    request: Request,
    db: Session = Depends(get_db)
):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    verify_admin(request)
    
    user_service = UserService(db)
    order_service = OrderService(db)
    communication_service = CommunicationService(db)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = order_service.get_orders_statistics()
    users_count = user_service.get_users_count()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
    from app.database.models.message import OrderMessage
    
    total_messages = db.query(OrderMessage).count()
    user_messages = db.query(OrderMessage).filter(OrderMessage.from_admin == False).count()
    admin_messages = db.query(OrderMessage).filter(OrderMessage.from_admin == True).count()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    recent_user_messages = communication_service.get_recent_user_messages(5)
    
    return {
        "orders": stats,
        "users_count": users_count,
        "messages": {
            "total_messages": total_messages,
            "user_messages": user_messages,
            "admin_messages": admin_messages,
            "recent_user_messages": recent_user_messages
        }
    }


@app.api_route("/files/download/{file_id}", methods=["GET", "HEAD"])
async def download_file(
    request: Request,
    file_id: int,
    db: Session = Depends(get_db)
):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HEAD –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    verify_admin(request)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from app.database.models.file import OrderFile
    
    file_record = db.query(OrderFile).filter(OrderFile.id == file_id).first()
    
    if not file_record:
        print(f"‚ùå –§–∞–π–ª —Å ID {file_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"üìÅ –ó–∞–ø—Ä–æ—Å –Ω–∞ {'–ø—Ä–æ–≤–µ—Ä–∫—É' if request.method == 'HEAD' else '—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ'} —Ñ–∞–π–ª–∞: {file_record.filename}")
    print(f"   –ü—É—Ç—å: {file_record.file_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ
    file_path = file_record.file_path
    if not file_path or not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ: {file_path}")
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
    
    print(f"‚úÖ {'–ü—Ä–æ–≤–µ—Ä—è–µ–º' if request.method == 'HEAD' else '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º'} —Ñ–∞–π–ª: {file_record.filename}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –∏–∑ –ë–î
    return FileResponse(
        path=file_path,
        filename=file_record.filename,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∏–∑ –ë–î
        media_type='application/octet-stream'
    )


@app.get("/orders/{order_id}/files")
async def get_order_files(
    request: Request,
    order_id: int,
    db: Session = Depends(get_db)
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞"""
    verify_admin(request)
    
    order_service = OrderService(db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order = order_service.get_order_by_id(order_id)
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
    files = order_service.get_order_files(order_id)
    
    print(f"üìÅ API –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
    
    return {
        "order_id": order_id,
        "files_count": len(files),
        "files": [
            {
                "id": file.id,
                "filename": file.filename,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
                "file_size": file.file_size,
                "file_type": file.file_type,
                "uploaded_at": file.uploaded_at.isoformat(),
                "download_url": f"/files/download/{file.id}",
                "exists_on_disk": os.path.exists(file.file_path) if file.file_path else False,
                "file_path_on_disk": os.path.basename(file.file_path) if file.file_path else None  # –¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ
            }
            for file in files
        ]
    }
@app.get("/orders/{order_id}/dialog")
async def get_order_dialog(
    request: Request,
    order_id: int,
    db: Session = Depends(get_db)
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∑–∞–∫–∞–∑—É (–∞–¥–º–∏–Ω + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"""
    verify_admin(request)
    
    communication_service = CommunicationService(db)
    messages = communication_service.get_dialog_messages(order_id, limit=100)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_service = OrderService(db)
    order = order_service.get_order_by_id(order_id)
    
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return {
        "order_id": order_id,
        "order_info": {
            "id": order.id,
            "work_type": order.work_type,
            "topic": order.short_topic,
            "status": order.status.value,
            "user_name": order.user.full_name,
            "user_username": order.user.username
        },
        "messages_count": len(messages),
        "messages": [
            {
                "id": msg.id,
                "text": msg.message_text,
                "from_admin": msg.from_admin,
                "sender": msg.sender_label,
                "sent_at": msg.sent_at.isoformat(),
                "delivered": msg.delivered,
                "telegram_message_id": msg.telegram_message_id
            }
            for msg in messages
        ]
    }


@app.exception_handler(StarletteHTTPException)
async def custom_http_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –æ—à–∏–±–æ–∫"""
    if exc.status_code == 404:
        return templates.TemplateResponse(
            "error.html",
            {
                "request": request,
                "error_code": 404,
                "error_message": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            },
            status_code=404
        )
    elif exc.status_code == 401:
        return RedirectResponse("/", status_code=302)
    else:
        return await http_exception_handler(request, exc)


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return templates.TemplateResponse(
        "error.html",
        {
            "request": request,
            "error_code": 400,
            "error_message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"
        },
        status_code=400
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    import traceback
    print(f"Unexpected error: {exc}")
    print(traceback.format_exc())
    
    return templates.TemplateResponse(
        "error.html",
        {
            "request": request,
            "error_code": 500,
            "error_message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        },
        status_code=500
    )

@app.get("/debug/files/{order_id}")
async def debug_order_files(
    request: Request,
    order_id: int,
    db: Session = Depends(get_db)
):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞"""
    verify_admin(request)
    
    from app.database.models.file import OrderFile
    
    # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤
    files = db.query(OrderFile).filter(OrderFile.order_id == order_id).all()
    
    debug_info = {
        "order_id": order_id,
        "files_count": len(files),
        "files": []
    }
    
    for file in files:
        file_exists = os.path.exists(file.file_path) if file.file_path else False
        disk_filename = os.path.basename(file.file_path) if file.file_path else None
        
        debug_info["files"].append({
            "id": file.id,
            "db_filename": file.filename,  # –ò–º—è –≤ –ë–î (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ)
            "disk_filename": disk_filename,  # –ò–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ
            "file_path": file.file_path,
            "file_size": file.file_size,
            "uploaded_at": str(file.uploaded_at),
            "exists_on_disk": file_exists,
            "disk_size": os.path.getsize(file.file_path) if file_exists else None,
            "size_match": os.path.getsize(file.file_path) == file.file_size if file_exists and file.file_size else None
        })
    
    return debug_info

@app.post("/orders/{order_id}/send_message")
async def send_message_to_user(
    request: Request,
    order_id: int,
    background_tasks: BackgroundTasks,
    message: str = Form(...),
    db: Session = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    verify_admin(request)
    
    if not message or not message.strip():
        raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_service = OrderService(db)
    order = order_service.get_order_by_id(order_id)
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    communication_service = CommunicationService(db)
    
    async def send_message_background():
        try:
            success = await communication_service.send_message_to_user(
                order_id=order_id,
                message_text=message.strip(),
                from_admin=True
            )
            if success:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∑–∞–∫–∞–∑—É #{order_id}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    background_tasks.add_task(send_message_background)
    
    return RedirectResponse(f"/orders/{order_id}?success=message_sent", status_code=302)


@app.post("/orders/{order_id}/upload_file")
async def upload_admin_file(
    request: Request,
    order_id: int,
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    verify_admin(request)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_service = OrderService(db)
    order = order_service.get_order_by_id(order_id)
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    if not file.filename:
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∏–º—è")
    
    if file.size > settings.max_file_size:
        raise HTTPException(
            status_code=413, 
            detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: {settings.max_file_size / 1024 / 1024:.1f} –ú–ë"
        )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω–∞
        admin_files_dir = Path(settings.upload_path) / str(order_id) / "admin"
        admin_files_dir.mkdir(parents=True, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
        file_extension = Path(file.filename).suffix
        unique_filename = f"{uuid.uuid4().hex[:8]}_{file.filename}"
        file_path = admin_files_dir / unique_filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        async with aiofiles.open(file_path, 'wb') as f:
            content = await file.read()
            await f.write(content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        communication_service = CommunicationService(db)
        order_file = communication_service.save_admin_file(
            order_id=order_id,
            file_path=str(file_path),
            original_filename=file.filename,
            file_size=file.size
        )
        
        print(f"‚úÖ –§–∞–π–ª –æ—Ç –∞–¥–º–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: {file.filename} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        
        return RedirectResponse(f"/orders/{order_id}?success=file_uploaded", status_code=302)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")


@app.post("/orders/{order_id}/send_file/{file_id}")
async def send_file_to_user(
    request: Request,
    order_id: int,
    file_id: int,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram"""
    verify_admin(request)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Ñ–∞–π–ª–∞
    order_service = OrderService(db)
    order = order_service.get_order_by_id(order_id)
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    from app.database.models.file import OrderFile
    file_record = db.query(OrderFile).filter(
        OrderFile.id == file_id,
        OrderFile.order_id == order_id
    ).first()
    
    if not file_record:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Ñ–æ–Ω–µ
    communication_service = CommunicationService(db)
    
    async def send_file_background():
        try:
            success = await communication_service.send_file_to_user(order_id, file_id)
            if success:
                print(f"‚úÖ –§–∞–π–ª {file_record.filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {file_record.filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    background_tasks.add_task(send_file_background)
    
    return RedirectResponse(f"/orders/{order_id}?success=file_sent", status_code=302)


@app.get("/orders/{order_id}/messages")
async def get_order_messages(
    request: Request,
    order_id: int,
    db: Session = Depends(get_db)
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É"""
    verify_admin(request)
    
    communication_service = CommunicationService(db)
    messages = communication_service.get_order_messages(order_id)
    
    return {
        "order_id": order_id,
        "messages_count": len(messages),
        "messages": [
            {
                "id": msg.id,
                "text": msg.message_text,
                "from_admin": msg.from_admin,
                "sender": msg.sender_label,
                "sent_at": msg.sent_at.isoformat(),
                "delivered": msg.delivered,
                "preview": msg.message_preview
            }
            for msg in messages
        ]
    }


@app.get("/orders/{order_id}/admin_files")
async def get_admin_files(
    request: Request,
    order_id: int,
    db: Session = Depends(get_db)
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–º"""
    verify_admin(request)
    
    from app.database.models.file import OrderFile
    
    admin_files = db.query(OrderFile).filter(
        OrderFile.order_id == order_id,
        OrderFile.uploaded_by_admin == True
    ).all()
    
    return {
        "order_id": order_id,
        "admin_files_count": len(admin_files),
        "files": [
            {
                "id": file.id,
                "filename": file.filename,
                "file_size": file.file_size,
                "uploaded_at": file.uploaded_at.isoformat(),
                "sent_to_user": file.sent_to_user,
                "sent_at": file.sent_at.isoformat() if file.sent_at else None,
                "exists_on_disk": os.path.exists(file.file_path) if file.file_path else False
            }
            for file in admin_files        ]
    }


# === –ü–õ–ê–¢–ï–ñ–ò ===

@app.get("/orders/{order_id}/payments")
async def get_order_payments(
    request: Request,
    order_id: int,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∑–∞–∫–∞–∑—É"""
    verify_admin(request)
    
    from app.services.payment_service import PaymentService
    payment_service = PaymentService(db)
    
    payments = payment_service.get_order_payments(order_id)
    
    return {
        "order_id": order_id,
        "payments_count": len(payments),
        "payments": [
            {
                "id": payment.id,
                "amount": float(payment.amount),
                "amount_text": payment.amount_rub,
                "status": payment.status_text,
                "is_verified": payment.is_verified,
                "is_rejected": payment.is_rejected,
                "screenshot_file_id": payment.screenshot_file_id,
                "screenshot_message": payment.screenshot_message,
                "created_at": payment.created_at.isoformat(),
                "verified_at": payment.verified_at.isoformat() if payment.verified_at else None,
                "rejected_at": payment.rejected_at.isoformat() if payment.rejected_at else None
            }
            for payment in payments
        ]
    }


@app.post("/payments/{payment_id}/verify")
async def verify_payment(
    request: Request,
    payment_id: int,
    db: Session = Depends(get_db)
):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂"""
    verify_admin(request)
    
    from app.services.payment_service import PaymentService
    payment_service = PaymentService(db)
    
    success = payment_service.verify_payment(payment_id, request.session.get("admin_user_id", 1))
    
    if success:
        return {"success": True, "message": "–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"}
    else:
        raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")


@app.post("/payments/{payment_id}/reject")
async def reject_payment(
    request: Request,
    payment_id: int,
    reason: str = Form(...),
    db: Session = Depends(get_db)
):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂"""
    verify_admin(request)
    
    from app.services.payment_service import PaymentService
    payment_service = PaymentService(db)
    
    success = payment_service.reject_payment(payment_id, reason, request.session.get("admin_user_id", 1))
    
    if success:
        return {"success": True, "message": "–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω"}
    else:
        raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")


@app.get("/admin/pending_payments")
async def get_pending_payments(
    request: Request,
    limit: int = 20,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    verify_admin(request)
    
    from app.services.payment_service import PaymentService
    payment_service = PaymentService(db)
    
    payments = payment_service.get_pending_payments(limit)
    
    return {
        "pending_count": len(payments),
        "payments": [
            {
                "id": payment.id,
                "order_id": payment.order_id,
                "order_topic": payment.order.short_topic,
                "amount": float(payment.amount),
                "amount_text": payment.amount_rub,
                "user_name": payment.order.user.full_name,
                "screenshot_file_id": payment.screenshot_file_id,
                "screenshot_message": payment.screenshot_message,
                "created_at": payment.created_at.isoformat()
            }
            for payment in payments
        ]
    }


# === –û–¢–õ–ê–î–û–ß–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ===

@app.get("/debug/payments/{order_id}")
async def debug_payments(
    order_id: int,
    db: Session = Depends(get_db)
):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        from app.services.payment_service import PaymentService
        payment_service = PaymentService(db)
        
        payments = payment_service.get_order_payments(order_id)
        
        result = {
            "order_id": order_id,
            "payments_count": len(payments),
            "debug": True,
            "payments": []
        }
        
        for payment in payments:
            result["payments"].append({
                "id": payment.id,
                "amount": float(payment.amount),
                "amount_text": payment.amount_rub,
                "status": payment.status_text,
                "is_verified": payment.is_verified,
                "is_rejected": payment.is_rejected,
                "screenshot_file_id": payment.screenshot_file_id,
                "screenshot_message": payment.screenshot_message,
                "created_at": payment.created_at.isoformat(),
                "verified_at": payment.verified_at.isoformat() if payment.verified_at else None,
                "rejected_at": payment.rejected_at.isoformat() if payment.rejected_at else None
            })
        
        return result
        
    except Exception as e:
        import traceback
        return {
            "error": str(e),
            "traceback": traceback.format_exc(),
            "order_id": order_id
        }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host=settings.admin_host, port=settings.admin_port)


