#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, timedelta
from sqlalchemy import func
from app.database.connection import get_db_session
from app.database.models.order import Order
from app.services.analytics_service import AnalyticsService

def debug_timeline_logic():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –õ–û–ì–ò–ö–ò –í–†–ï–ú–ï–ù–ù–û–ô –®–ö–ê–õ–´")
    print("=" * 60)
    
    with get_db_session() as db:
        service = AnalyticsService(db)
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=30)
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –ù–∞—á–∞–ª–æ: {start_date}")
        print(f"   –ö–æ–Ω–µ—Ü: {end_date}")
        print(f"   –°–µ–≥–æ–¥–Ω—è: {datetime.now()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –∑–∞–ø—Ä–æ—Å
        print(f"\nüîé SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:")
        orders_by_date = db.query(
            func.date(Order.created_at).label('date'),
            func.count(Order.id).label('count')
        ).filter(
            func.date(Order.created_at) >= start_date
        ).group_by(
            func.date(Order.created_at)
        ).order_by('date').all()
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(orders_by_date)}")
        for date, count in orders_by_date:
            print(f"   {date}: {count} –∑–∞–∫–∞–∑–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –ø–µ—Ä–∏–æ–¥
        print(f"\nüìã –í—Å–µ –∑–∞–∫–∞–∑—ã –≤ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}:")
        all_orders = db.query(Order).filter(
            func.date(Order.created_at) >= start_date
        ).order_by(Order.created_at).all()
        
        print(f"   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ: {len(all_orders)}")
        for order in all_orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   ID {order.id}: {order.created_at.date()} ({order.created_at})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã:")
        orders_dict = {date: count for date, count in orders_by_date}
        print(f"   orders_dict: {orders_dict}")
        
        result = []
        current_date = start_date
        days_processed = 0
        
        while current_date <= end_date and days_processed < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π
            count = orders_dict.get(current_date, 0)
            result.append({
                "date": current_date.isoformat(),
                "orders_count": count
            })
            print(f"   {current_date}: {count} –∑–∞–∫–∞–∑–æ–≤")
            current_date += timedelta(days=1)
            days_processed += 1
        
        print("   ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç AnalyticsService.get_orders_timeline():")
        timeline = service.get_orders_timeline(30)
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {len(timeline)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        non_zero_days = [day for day in timeline if day['orders_count'] > 0]
        print(f"   –î–Ω–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏: {len(non_zero_days)}")
        for day in non_zero_days:
            print(f"   {day['date']}: {day['orders_count']} –∑–∞–∫–∞–∑–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
        print(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π:")
        for day in timeline[-5:]:
            print(f"   {day['date']}: {day['orders_count']} –∑–∞–∫–∞–∑–æ–≤")

if __name__ == "__main__":
    debug_timeline_logic()
