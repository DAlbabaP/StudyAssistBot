#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π SellerBot
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from app.config import settings
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        from app.database.models import User, Order, OrderFile
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –ë–î –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        from app.services.order_service import OrderService
        print("‚úÖ OrderService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from app.bot.handlers.orders import send_admin_notification
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        from app.bot.handlers.price_callbacks import router
        print("‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        from app.bot.keyboards.client import get_price_response_keyboard
        print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from app.config import settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not settings.bot_token or settings.bot_token == "your_bot_token_here":
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return False
        else:
            print("‚úÖ BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not settings.admin_user_id or settings.admin_user_id == 0:
            print("‚ùå ADMIN_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return False
        else:
            print(f"‚úÖ ADMIN_USER_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {settings.admin_user_id}")
        
        print(f"‚úÖ Database URL: {settings.database_url}")
        print(f"‚úÖ Upload path: {settings.upload_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_database():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.database.connection import get_db_async, create_tables
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        create_tables()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async def check_db():
            db = await get_db_async()
            if db:
                db.close()
                return True
            return False
        
        result = asyncio.run(check_db())
        if result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False


def test_directories():
    """–¢–µ—Å—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    try:
        from app.config import settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º upload –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        upload_path = Path(settings.upload_path)
        if not upload_path.exists():
            upload_path.mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {upload_path}")
        else:
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {upload_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤
        template_files = [
            "app/admin/templates/order_detail.html",
            "app/admin/templates/base.html",
        ]
        
        for template in template_files:
            if Path(template).exists():
                print(f"‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω: {template}")
            else:
                print(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
        return False


def test_bot_token():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
    
    try:
        from app.config import settings
        from aiogram import Bot
        
        if settings.bot_token == "your_bot_token_here":
            print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        async def check_token():
            try:
                bot = Bot(token=settings.bot_token)
                me = await bot.get_me()
                await bot.session.close()
                return me
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
                return None
        
        me = asyncio.run(check_token())
        if me:
            print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} ({me.first_name})")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return False


def test_admin_endpoints():
    """–¢–µ—Å—Ç endpoints –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
    
    try:
        from app.admin.main import app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç—ã
        routes = [route.path for route in app.routes]
        
        required_routes = [
            "/files/download/{file_id}",
            "/orders/{order_id}/files",
            "/orders/{order_id}/price",
            "/orders/{order_id}/status"
        ]
        
        for route in required_routes:
            if route in routes:
                print(f"‚úÖ –†–æ—É—Ç –Ω–∞–π–¥–µ–Ω: {route}")
            else:
                print(f"‚ùå –†–æ—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {route}")
                return False
        
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–æ—É—Ç—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π SellerBot")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", test_directories),
        ("–¢–æ–∫–µ–Ω –±–æ—Ç–∞", test_bot_token),
        ("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", test_admin_endpoints)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<40} {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"–ü—Ä–æ—à–ª–æ: {passed}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        print("\n–ó–∞–ø—É—Å–∫:")
        print("  python main_bot.py")
        print("  python main_admin.py")
    else:
        print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {failed}")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. –§–∞–π–ª .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("  2. –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–º–µ–Ω–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        print("  3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")


if __name__ == "__main__":
    main()