#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""
import requests
import json
from pprint import pprint

# –ë–∞–∑–æ–≤—ã–π URL –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
BASE_URL = "http://localhost:8000"

def test_endpoint(endpoint_path, description):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    url = f"{BASE_URL}{endpoint_path}"
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {description}")
    print(f"URL: {url}")
    
    try:
        response = requests.get(url, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
                pprint(data)
                return True
            except json.JSONDecodeError:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {response.text[:200]}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    endpoints = [
        ("/api/analytics/overview", "–û–±—â–∏–π –æ–±–∑–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"),
        ("/api/analytics/orders/status", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"),
        ("/api/analytics/orders/timeline?days=30", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤"),
        ("/api/analytics/revenue/timeline?days=30", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤"),
        ("/api/analytics/conversion/funnel", "–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"),
        ("/api/analytics/work-types", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç"),
        ("/api/analytics/financial", "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"),
        ("/api/analytics/operational", "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"),
        ("/api/analytics/users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"),
    ]
    
    success_count = 0
    
    for endpoint, description in endpoints:
        if test_endpoint(endpoint, description):
            success_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(endpoints)}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(endpoints) - success_count}/{len(endpoints)}")
    
    if success_count == len(endpoints):
        print("üéâ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")

if __name__ == "__main__":
    main()
