#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ–±—â–µ–Ω–∏—è
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy import create_engine, text
from app.config import settings
from app.database.connection import engine


def migrate_database():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        with engine.connect() as connection:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            with connection.begin():
                
                # 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É order_files
                print("üìÅ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É order_files...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ uploaded_by_admin
                result = connection.execute(text(
                    "PRAGMA table_info(order_files)"
                ))
                columns = [row[1] for row in result.fetchall()]
                
                if 'uploaded_by_admin' not in columns:
                    connection.execute(text(
                        "ALTER TABLE order_files ADD COLUMN uploaded_by_admin BOOLEAN DEFAULT 0 NOT NULL"
                    ))
                    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ uploaded_by_admin")
                
                if 'sent_to_user' not in columns:
                    connection.execute(text(
                        "ALTER TABLE order_files ADD COLUMN sent_to_user BOOLEAN DEFAULT 0 NOT NULL"
                    ))
                    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ sent_to_user")
                
                if 'sent_at' not in columns:
                    connection.execute(text(
                        "ALTER TABLE order_files ADD COLUMN sent_at DATETIME"
                    ))
                    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ sent_at")
                
                # 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É order_messages
                print("üí¨ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É order_messages...")
                
                connection.execute(text("""
                    CREATE TABLE IF NOT EXISTS order_messages (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        order_id INTEGER NOT NULL,
                        message_text TEXT NOT NULL,
                        from_admin BOOLEAN DEFAULT 0 NOT NULL,
                        sent_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
                        delivered BOOLEAN DEFAULT 0 NOT NULL,
                        telegram_message_id INTEGER,
                        FOREIGN KEY (order_id) REFERENCES orders (id)
                    )
                """))
                print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ order_messages —Å–æ–∑–¥–∞–Ω–∞")
                
                # 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                print("üîç –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
                
                connection.execute(text(
                    "CREATE INDEX IF NOT EXISTS idx_order_messages_order_id ON order_messages (order_id)"
                ))
                
                connection.execute(text(
                    "CREATE INDEX IF NOT EXISTS idx_order_messages_sent_at ON order_messages (sent_at)"
                ))
                
                connection.execute(text(
                    "CREATE INDEX IF NOT EXISTS idx_order_files_uploaded_by_admin ON order_files (uploaded_by_admin)"
                ))
                
                print("  ‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        with engine.connect() as connection:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É order_files
            result = connection.execute(text("PRAGMA table_info(order_files)"))
            order_files_columns = [row[1] for row in result.fetchall()]
            
            required_columns = ['uploaded_by_admin', 'sent_to_user', 'sent_at']
            for column in required_columns:
                if column in order_files_columns:
                    print(f"  ‚úÖ order_files.{column}")
                else:
                    print(f"  ‚ùå order_files.{column} - –ù–ï –ù–ê–ô–î–ï–ù–û")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ order_messages
            result = connection.execute(text(
                "SELECT name FROM sqlite_master WHERE type='table' AND name='order_messages'"
            ))
            
            if result.fetchone():
                print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ order_messages —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É order_messages
                result = connection.execute(text("PRAGMA table_info(order_messages)"))
                message_columns = [row[1] for row in result.fetchall()]
                
                required_msg_columns = ['id', 'order_id', 'message_text', 'from_admin', 'sent_at', 'delivered']
                for column in required_msg_columns:
                    if column in message_columns:
                        print(f"    ‚úÖ order_messages.{column}")
                    else:
                        print(f"    ‚ùå order_messages.{column} - –ù–ï –ù–ê–ô–î–ï–ù–û")
                        return False
            else:
                print("  ‚ùå –¢–∞–±–ª–∏—Ü–∞ order_messages –ù–ï –ù–ê–ô–î–ï–ù–ê")
                return False
        
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üóÑÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –æ–±—â–µ–Ω–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not os.path.exists("seller_bot.db"):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö seller_bot.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python init_db.py")
        return False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if migrate_database():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if verify_migration():
            print("\nüöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìù –ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
            print("1. ‚úÖ –ü–æ–ª—è –≤ order_files –¥–ª—è —Ñ–∞–π–ª–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞")
            print("2. ‚úÖ –¢–∞–±–ª–∏—Ü–∞ order_messages –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è")
            print("3. ‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("\nüéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!")
            return True
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False


if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)